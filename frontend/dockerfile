FROM node:22.11.0 AS builder

WORKDIR /opt

COPY [".", "."]

RUN npm install -g yarn --force
RUN yarn install
RUN yarn build

# Stage 2: Serve the app with Nginx
FROM nginx:stable-alpine
COPY --from=builder /opt/dist /usr/share/nginx/html
COPY --from=builder /opt/nginx.conf /etc/nginx/nginx.conf

# Create a non-root user to run Nginx
RUN adduser -D -u 1001 nginxuser && \
    chown -R nginxuser:nginxuser /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginxuser:nginxuser /var/cache/nginx && \
    chown -R nginxuser:nginxuser /var/log/nginx && \
    chown -R nginxuser:nginxuser /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginxuser:nginxuser /var/run/nginx.pid

# Grant permissions for nginxuser to create and modify env.js
RUN mkdir -p /usr/share/nginx/html/assets && \
    touch /usr/share/nginx/html/assets/env.js && \
    chown nginxuser:nginxuser /usr/share/nginx/html/assets/env.js && \
    chmod 664 /usr/share/nginx/html/assets/env.js

USER nginxuser

# Expose port 8080
EXPOSE 8080

# When the container starts, replace the env.js with values from environment variables
CMD ["/bin/sh", "-c", "envsubst < /usr/share/nginx/html/assets/env.staging.js > /usr/share/nginx/html/assets/env.js && nginx -g 'daemon off;'"]